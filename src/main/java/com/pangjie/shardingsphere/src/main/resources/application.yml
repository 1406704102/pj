# 数据源配置
spring:
  shardingsphere:
    datasource:
        # 指定数据源
      names: s1,s2
      s1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://139.155.84.163:3306/sharding_sphere_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&allowMultiQueries=true
        username: root
        password: root_pangjie
      s2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://139.155.84.163:3306/sharding_sphere_demo2?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&allowMultiQueries=true
        username: root
        password: root_pangjie

  # 指定配置表在哪个数据库，表名称是什么。spring.shardingsphere.sharding.tables.表名.actual-data-nodes=datasource-names.table-name_$->{start..end}
    sharding:
#      默认数据源
      default-data-source-name: s1
      tables:
        sharding:
            # 指定分库分表的目标表
#          actual-data-nodes: s1.sharding_$->{1..2} #分表
          actual-data-nodes: s$->{1..2}.sharding_$->{1..2} #分库分表
            # 指定主键字段以及生成算法。spring.shardingsphere.sharding.tables.表名
          key-generator:
            column: id
            type: SNOWFLAKE
          # 指定库分片策略（根据主键取余）
          database-strategy:
            inline:
              sharding-column: id
              algorithm-expression: s$->{id % 2 + 1}
            # 指定表分片策略（根据主键取余）。spring.shardingsphere.sharding.tables.表名
          table-strategy:
            inline:
              sharding-column: id
              algorithm-expression: sharding_$->{id % 2 + 1}
#              algorithm-expression: sharding_1
    # 控制台显示SQL语句
    props:
      sql:
        show: true
  main:
    # 允许一个实体类对应多张表
    allow-bean-definition-overriding: true
