# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

#     轮询（默认）
#     upstream httpServer {
#       server 127.0.0.1:8889;
#       server 127.0.0.1:8888;
#       server 127.0.0.1:8887;
#     }
#     weight: 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
#     upstream httpServer {
#       server 127.0.0.1:8889 weight=1;
#       server 127.0.0.1:8888 weight=2;
#       server 127.0.0.1:8887 weight=7;
#     }
#     ip_hash: 哈希算法，根据ip自动定位到该服务器
#     upstream httpServer {
#         ip_hash;
#         server 127.0.0.1:8889;
#         server 127.0.0.1:8888;
#         server 127.0.0.1:8887;
#     }
#     fair: 按后端服务器的响应时间来分配请求，响应时间短的优先分配。
#     upstream httpServer {
#         fair;
#         server 127.0.0.1:8889;
#         server 127.0.0.1:8888;
#         server 127.0.0.1:8887;
#     }
#     url_hash: 按访问url的hash结果来分配请求，使每个url定向到同一个（对应的）后端服务器。
#     upstream httpServer {
#         fair;
#         server 127.0.0.1:8889;
#         server 127.0.0.1:8888;
#         server 127.0.0.1:8887;
#     }

#     weight: 访问比率成
#     down：当前的 Server 暂时不参与负载均衡
#     backup：预留的备份服务器
#     max_fails：允许请求失败的次数
#     fail_timeout：经过 max_fails 失败后，服务暂停的时间
#     max_conns：限制最大的接收的连接数

    server {
        listen 443 ssl;
        server_name mpzxt.xmay.cc;
        # 证书文件，这里使用了 fullchain.cer 通过 acme.sh 生成的泛域名证书
        ssl_certificate /etc/nginx/ssl/4036691__xmay.cc.pem;
        # 私钥文件
        ssl_certificate_key /etc/nginx/ssl/4036691__xmay.cc.key;

        # 避免访问出现 404 错误
        location / {
            proxy_pass http://httpServer;
        }
    }

    server {
        listen 443 ssl;
        server_name ms.xmay.cc;
        # 证书文件，这里使用了 fullchain.cer 通过 acme.sh 生成的泛域名证书
        ssl_certificate /etc/nginx/ssl/4036691__xmay.cc.pem;
        # 私钥文件
        ssl_certificate_key /etc/nginx/ssl/4036691__xmay.cc.key;

        #ssl_session_cache    shared:SSL:1m;
        #ssl_session_timeout  5m;

        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers  on;


        # 避免访问出现 404 错误
        location / {
            root /usr/local/src/html/seller;  # 站点根目录
            try_files $uri $uri/ @router; # 指向下面的 @router否则会出现 404
            index index.html index.htm;
        }

        # 对应上面的 @router,主要Vue请求并不是真实路径，无法找到文件，需要重定向到 index.html 中，然后交给路由处理
        location @router {
            rewrite ^.*$ /index.html last;
        }

    }

    server {
        listen 443 ssl;
        server_name ma.xmay.cc;
        # 证书文件，这里使用了 fullchain.cer 通过 acme.sh 生成的泛域名证书
        ssl_certificate /etc/nginx/ssl/4036691__xmay.cc.pem;
        # 私钥文件
        ssl_certificate_key /etc/nginx/ssl/4036691__xmay.cc.key;

        #ssl_session_cache    shared:SSL:1m;
        #ssl_session_timeout  5m;

        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers  on;

        location / {
            root /usr/local/src/html/manager;  # 站点根目录
            try_files $uri $uri/ @router; # 指向下面的 @router否则会出现 404
            index index.html index.htm;
        }

        # 对应上面的 @router,主要Vue请求并不是真实路径，无法找到文件，需要重定向到 index.html 中，然后交给路由处理
        location @router {
            rewrite ^.*$ /index.html last;
        }

    }


    server {
        listen 443 ssl;
        server_name mp.xmay.cc;
        # 证书文件，这里使用了 fullchain.cer 通过 acme.sh 生成的泛域名证书
        ssl_certificate /etc/nginx/ssl/4036691__xmay.cc.pem;
        # 私钥文件
        ssl_certificate_key /etc/nginx/ssl/4036691__xmay.cc.key;

        #ssl_session_cache    shared:SSL:1m;
        #ssl_session_timeout  5m;

        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers  on;


        location / {
            proxy_set_header Host $http_host;
            proxy_pass http://129.28.204.83:9000;
        }

    }

}

